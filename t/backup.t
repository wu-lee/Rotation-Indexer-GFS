#!/usr/bin/perl
use strict;
use warnings;
use Test::More;
use FindBin qw($Bin);
use lib "$Bin/../lib";
use lib "$Bin/lib";

# This test illustrates how to get an offset for ->index from a date,
# assuming backups are daily.

# Skip this test if DateTime is not available.
eval { require DateTime }
    or plan skip_all => "DateTime not available";

plan tests => 2;

my $class = 'Rotation::Indexer::GFS';

# rotate on FTP in nested cycles of 7 (days), then 2 (weeks), then 12 (fortnights)
my $start_time = DateTime->new(year => 2009, month => 5, day => 1);
my @cycles = (7, 4, 12);

my $cycle_period = 1; 
$cycle_period *= $_
    for @cycles;

use_ok $class;


# given a date relative to a start date, and a cycle definition,
# compute the index.
{
    my $ixr = $class->new(@cycles);
    sub index_for {
        my $day = shift;
        my $start_day = shift;
        
        # DateTime->delta_days does exactly what we want, and avoids
        # needing to convert a DateTime::Duration into pure days - except
        # that it returns an absolute difference.
        my $abs_days = $day->delta_days($start_day)->delta_days;
        
        # So convert that back into a signed difference.
        my $days = $day < $start_day? -$abs_days : $abs_days;
        
        return $ixr->index($days);
    }
}



my $time = $start_time->clone->subtract( days => $cycle_period );

#my $datestr = $time->strftime('%F-%H%M');
my @indexes = map { 
    [index_for $start_time->clone->add( days => $_ ), $start_time];
} -$cycle_period..$cycle_period;

#print explain \@indexes;
is_deeply 
    \@indexes, [
        [0, 0, 0],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 1],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 2],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 3],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 4],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 5],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 6],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 7],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 8],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 9],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 10],  [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 11],  [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 0],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 1],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 2],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 3],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 4],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 5],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 6],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 7],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 8],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 9],   [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 10],  [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 11],  [1], [2], [3], [4], [5], [6],
        [0, 1],      [1], [2], [3], [4], [5], [6],
        [0, 2],      [1], [2], [3], [4], [5], [6],
        [0, 3],      [1], [2], [3], [4], [5], [6],
        [0, 0, 0]
    ], "correct index";

